<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.sephora.services.omni-product-service</groupId>
        <artifactId>omni-product-service-parent</artifactId>
        <version>2025.18-SNAPSHOT</version>
    </parent>

    <artifactId>omni-product-service</artifactId>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>com.graphql-java</groupId>
            <artifactId>graphql-java</artifactId>
        </dependency>
        <dependency>
            <groupId>com.graphql-java</groupId>
            <artifactId>graphql-java-extended-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>com.lmax</groupId>
            <artifactId>disruptor</artifactId>
        </dependency>
        <dependency>
            <groupId>com.netflix.graphql.dgs</groupId>
            <artifactId>graphql-dgs-extended-scalars</artifactId>
        </dependency>
        <dependency>
            <groupId>com.netflix.graphql.dgs</groupId>
            <artifactId>graphql-dgs-spring-boot-micrometer</artifactId>
        </dependency>
        <dependency>
            <groupId>com.netflix.graphql.dgs</groupId>
            <artifactId>graphql-dgs-spring-graphql-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.netflix.graphql.dgs</groupId>
            <artifactId>graphql-dgs-spring-graphql-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.sephora.platform</groupId>
            <artifactId>platform-commons-common</artifactId>
        </dependency>
        <dependency>
            <groupId>com.sephora.platform</groupId>
            <artifactId>platform-commons-logging</artifactId>
        </dependency>
        <dependency>
            <groupId>com.sephora.services.omni-product-service</groupId>
            <artifactId>commerce-tools-adapter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.sephora.services.omni-product-service</groupId>
            <artifactId>common</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.resilience4j</groupId>
            <artifactId>resilience4j-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.resilience4j</groupId>
            <artifactId>resilience4j-circuitbreaker</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.resilience4j</groupId>
            <artifactId>resilience4j-spring-boot3</artifactId>
        </dependency>
        <!-- Micrometer dependencies for metrics -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-dynatrace</artifactId>
        </dependency>
        <!-- Micrometer Prometheus registry  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${io.swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-core</artifactId>
            <version>${io.swagger.version}</version>
        </dependency>
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-models</artifactId>
            <version>${io.swagger.version}</version>
        </dependency>
        <!-- Jakarta dependencies  -->
        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
        </dependency>
        <!-- Set version to 2.24.3 for avoid conflict with dgs -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-layout-template-json</artifactId>
        </dependency>
        <!-- Spring Framework dependencies  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bootstrap</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-kubernetes-fabric8-config</artifactId>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>**/swagger.properties</include>
                </includes>
            </resource>
            <resource>
                <filtering>false</filtering>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>**/swagger.properties</exclude>
                    <exclude>application-local.yaml</exclude>
                    <exclude>bootstrap-local.yaml</exclude>
                    <exclude>log4j2-local.xml</exclude>
                </excludes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <includeSystemScope>true</includeSystemScope>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                        </exclude>
                        <exclude>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                            <goal>build-info</goal>
                        </goals>
                        <configuration>
                            <mainClass>com.sephora.services.product.OmniProductServiceApplication</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.github.git-commit-id</groupId>
                <artifactId>git-commit-id-maven-plugin</artifactId>
                <configuration>
                    <generateGitPropertiesFile>false</generateGitPropertiesFile>
                    <dateFormat>yyyy-MM-dd HH:mm:ss</dateFormat>
                    <abbrevLength>8</abbrevLength>
                </configuration>
                <executions>
                    <execution>
                        <id>get-the-git-infos</id>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.danielflower.mavenplugins</groupId>
                <artifactId>gitlog-maven-plugin</artifactId>
                <version>${gitlog-maven-plugin.version}</version>
                <configuration>
                    <includeCommitsDuringTheLastDays>5</includeCommitsDuringTheLastDays>
                    <generatePlainTextChangeLog>false</generatePlainTextChangeLog>
                    <generateSimpleHTMLChangeLog>false</generateSimpleHTMLChangeLog>
                    <outputDirectory>${project.basedir}/src/main/resources</outputDirectory>
                </configuration>
                <executions>
                    <execution>
                        <id>get-the-git-change-log</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>properties</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <trimStackTrace>false</trimStackTrace>
                    <!-- Jacoco prepare-agent builds some command-line params without -->
                    <!-- which jacoco will not instrument. Hence, it is important to add -->
                    <!-- those command-line params here (${argLine} holds those params) -->
                    <argLine>${surefireArgLine} -javaagent:${org.mockito:mockito-core:jar} -Djdk.net.URLClassPath.disableClassPathURLCheck=true -Xshare:off --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.time.format=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.util.stream=ALL-UNNAMED --add-opens java.base/java.lang=ALL-UNNAMED</argLine>
                </configuration>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${io.fabric8.docker.maven.plugin.version}</version>
                <configuration>
                    <images>
                        <image>
                            <name>omni-product-service/${git.branch}</name>
                            <registry>${docker.registry}</registry>
                            <build>
                                <contextDir>${project.basedir}</contextDir>
                                <tags>
                                    <tag>${git.commit.id}</tag>
                                </tags>
                            </build>
                        </image>
                    </images>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>local</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <resources>
                    <resource>
                        <directory>src/main/resources</directory>
                        <includes>
                            <include>application-local.yaml</include>
                            <include>bootstrap-local.yaml</include>
                            <include>log4j2-local.xml</include>
                        </includes>
                    </resource>
                </resources>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <configuration>
                            <includeSystemScope>true</includeSystemScope>
                            <jvmArguments>-Xdebug -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006
                                -XX:ActiveProcessorCount=1 -Xms2048m -Xmx2536m</jvmArguments>
                            <profiles>
                                <profile>local</profile>
                            </profiles>
                            <environmentVariables>
                                <JAVA_TOOL_OPTIONS>-XX:MaxGCPauseMillis=120 -XX:-G1UseAdaptiveIHOP
                                    -XX:InitiatingHeapOccupancyPercent=65 -XX:SurvivorRatio=2 -XX:ParallelGCThreads=10
                                    -XX:ConcGCThreads=5 -XX:+UseG1GC -XX:+UnlockDiagnosticVMOptions
                                    -XX:GCLockerRetryAllocationCount=75 -XX:MaxRAMPercentage=75
                                    -XX:+HeapDumpOnOutOfMemoryError</JAVA_TOOL_OPTIONS>
                                <!-- ZGC example -->
                                <!--  <JAVA_TOOL_OPTIONS>-XX:MaxGCPauseMillis=120 -XX:InitiatingHeapOccupancyPercent=65 -XX:SurvivorRatio=2 -XX:ParallelGCThreads=10 -XX:ConcGCThreads=5 -XX:+UseZGC -XX:+UnlockDiagnosticVMOptions -XX:GCLockerRetryAllocationCount=75 -XX:MaxRAMPercentage=75 -XX:+HeapDumpOnOutOfMemoryError -XX:SoftMaxHeapSize=2g</JAVA_TOOL_OPTIONS> -->
                            </environmentVariables>
                            <systemPropertyVariables>
                                <log4j.configurationFile>log4j2-local.xml</log4j.configurationFile>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${io.fabric8.docker.maven.plugin.version}</version>
                        <configuration>
                            <images>
                                <image>
                                    <build>
                                        <dockerFile>Dockerfile_local</dockerFile>
                                    </build>
                                    <run>
                                        <ports>
                                            <port>8080:8080</port>
                                            <!-- Expose debug port-->
                                            <port>5006:5006</port>
                                        </ports>
                                        <!-- 2G -->
                                        <memory>2147483648</memory>
                                        <!-- 1 CPU -->
                                        <cpus>1</cpus>
                                        <env>
                                            <!-- IP to config hub. Recommend using mock service because real config hub can be unavailable
                                             from local docker -->
                                            <SPRING_PROFILES_ACTIVE>local</SPRING_PROFILES_ACTIVE>
                                            <_JAVA_OPTIONS>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006</_JAVA_OPTIONS>
                                        </env>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <!-- Exclude deploy spring boot flat jar -->
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>docker_build</id>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <phase>install</phase>
                            </execution>
                            <execution>
                                <id>docker_push</id>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                                <phase>deploy</phase>
                            </execution>
                            <execution>
                                <!-- Do clean up -->
                                <id>docker_remove</id>
                                <goals>
                                    <goal>remove</goal>
                                </goals>
                                <phase>deploy</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>jacoco</id>
            <activation>
                <property>
                    <name>!skipTests</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${jacoco.version}</version>
                        <configuration>
                            <!--<excludes>
                                <exclude>com/sephora/product/rewards/dto/**/*</exclude>
                                <exclude>com/sephora/product/rewards/retriever/dto/**/*</exclude>
                            </excludes>-->
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                                <configuration>
                                    <propertyName>surefireArgLine</propertyName>
                                </configuration>
                            </execution>
                            <execution>
                                <id>report</id>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                                <phase>test</phase>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
